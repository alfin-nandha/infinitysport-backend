openapi: '3.0.3'
info:
  title: 'Group Project 2 Alta: InfinitySport'
  version: '1.0'
  description: 'API Documentation for InfinitySport'
  contact: 
    name:  Official
    url: https://infinitysport.site
    email: alfin.7007@gmail.com
externalDocs: 
  description: "GitHub Repository of Group Project 2 : infinitysport"
  url: https://github.com/project-online-shop/backend
servers:
  - url: https://infinitysport.site
    description: Base URL that will be used for endpoints
tags:
  - name: Login
    description: Endpoint for verifying who a user is
  - name: Sign Up
    description: Endpoint for user registration
  - name: Users
    description: Endpoint for perform operations on user
  - name: Products
    description: Endpoint for perform operations on product
  - name: Cart
    description: Endpoint for perform operations on cart
  - name: Order
    description: Endpoint for perform operations on order 
paths:
####################################
#  AUTHENTICATION
####################################
  /login:
    post:
      tags:
        - Login
      summary: Get token for access to account
      requestBody:
        $ref: '#/components/requestBodies/requestBodyLogin'
      responses:
        '200':
          $ref: '#/components/responses/loginSuccess'
        '400':
          $ref: '#/components/responses/loginFailed'
####################################
#  SIGN UP
####################################
  /signup:
    post:
      tags:
        - Sign Up
      summary: Create a new account for customer only
      requestBody:
        $ref: '#/components/requestBodies/requestBodyUser'
      responses:
        '200':
          $ref: '#/components/responses/successOperationNonData'
        '400':
          $ref: '#/components/responses/createUserFailed'
####################################
#  USERS
####################################
  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user's data by id
      security:
        - JWTAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          $ref: '#/components/responses/getUserSuccess'
        '400':
          $ref: '#/components/responses/getDataByIdFailed'
    put:
      tags:
        - Users
      summary: Edit user's data by id
      security:
        - JWTAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        $ref: '#/components/requestBodies/requestBodyUserUpdate'
      responses:
        '200':
          $ref: '#/components/responses/successOperationNonData'
        '400':
          $ref: '#/components/responses/updateUserFailed'
    delete:
      tags:
        - Users
      summary: Delete user's data by id
      security:
        - JWTAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          $ref: '#/components/responses/successOperationNonData'
        '400':
          $ref: '#/components/responses/deleteDataByIdFailed'
####################################
#  PRODUCTS
####################################
  /products:
    post:
      tags:
        - Products
      summary: Create a new product
      security:
        - JWTAuth: []
      requestBody:
        $ref: '#/components/requestBodies/requestBodyProduct'
      responses:
        '200':
          $ref: '#/components/responses/successOperationNonData'
        '400':
          $ref: '#/components/responses/createProductFailed'
        '500':
          $ref: '#/components/responses/productServerFailed'
    get:
      tags:
      - Products
      summary: Get all products
      responses:
        '200':
          $ref: '#/components/responses/getAllProductsSuccess'
        '400':
          $ref: '#/components/responses/getAllDataFailed'
  /products/{id}:
    get:
      tags:
        - Products
      summary: Get product by id
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          $ref: '#/components/responses/getProductSuccess'
        '400':
          $ref: '#/components/responses/getDataByIdFailed'
    put:
      tags:
        - Products
      summary: Update product by id for product owner only
      security:
        - JWTAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        $ref: '#/components/requestBodies/requestBodyProductUpdate'
      responses:
        '200':
          $ref: '#/components/responses/successOperationNonData'
        '400':
          $ref: '#/components/responses/updateProductFailed'
        '500':
          $ref: '#/components/responses/productServerFailed'
    delete:
      tags:
      - Products
      summary: Delete product by id for product owner only
      security:
        - JWTAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          $ref: '#/components/responses/successOperationNonData'
        '400':
          $ref: '#/components/responses/deleteDataByIdFailed'

####################################
#  CART
####################################
  /cart/:
    post:
      tags:
      - Cart
      summary: Create a new cart
      security:
        - JWTAuth: []
      requestBody:
        $ref: '#/components/requestBodies/requestBodyOrder'
      responses:
        '200':
          $ref: '#/components/responses/createcartuccess'
        '400':
          $ref: '#/components/responses/createOrderFailed'
    get:
      tags:
        - Cart
      summary: Get cart
      security:
        - JWTAuth: []
      responses:
        '200':
          $ref: '#/components/responses/getcartsuccess'
        '400':
          $ref: '#/components/responses/OrderResponseFailed'
  /cart/update/{id}:
    put:
      tags:
        - Cart
      summary: Update cart by id order
      security:
        - JWTAuth: []
      requestBody:
        $ref: '#/components/requestBodies/requestBodyOrderUpdate'
      responses:
        '200':
          $ref: '#/components/responses/Updatecartuccess'
        '400':
          $ref: '#/components/responses/UpdateOrderFailed'
    delete:
      tags:
        - Cart
      summary: Delete cart by id
      security:
        -  JWTAuth: []
      responses:  
        '200':
            $ref: '#/components/responses/successOperationNonData'
        '400':
            $ref: '#/components/responses/deleteDataByIdFailed'

####################################
#  ORDER
####################################
  /order:
      post:
        tags:
        - Order
        summary: Create a new order
        security:
          - JWTAuth: []
        requestBody:
          $ref: '#/components/requestBodies/requestBodyOrder'
        responses:
          '200':
            $ref: '#/components/responses/createcartuccess'
          '400':
            $ref: '#/components/responses/createOrderFailed'
      get:
        tags:
          - Order
        summary: Get order
        security:
          - JWTAuth: []
        responses:
          '200':
            $ref: '#/components/responses/getcartsuccess'
          '400':
            $ref: '#/components/responses/OrderResponseFailed'

####################################
#  COMPONENTS
####################################
components:
  schemas:
    requestDataLogin:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    requestDataUser:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          minLength: 1
          pattern: '^0-9A-Za-z_.$'
        email:
          type: string
          format: email
          minLength: 5
          description: inputted email must be unique
        password:
          type: string
          minLength: 6
    requestDataProduct:
      type: object
      required:
        - name_product
        - detail_product
        - price
        - stock
        - photo
      properties:
        name_product:
          type: string
          minLength: 1
        detail_product:
          type: string
          minLength: 1
        price:
          type: integer
          minimum: 1
        stock:
          type: integer
          minimum: 2
        photo:
          type: string
          format: binary
          description: "allowed file extension: jpg, png, jpeg && size <= 1050000 byte"
    requestDataProductUpdate:
      type: object
      required:
        - name_product
        - detail_product
        - price
        - stock
      properties:
        name_product:
          type: string
          minLength: 1
        detail_product:
          type: string
          minLength: 1
        price:
          type: integer
          minimum: 1
        stock:
          type: integer
          minimum: 2
        photo:
          type: string
          format: binary
          description: "allowed file extension: jpg, png, jpeg && size <= 1050000 byte"
    ###
    requestDataOrder:
      type: object
      required:
      - phone
      properties:
        phone:
          type: string
          pattern: '^08[1-9][0-9]{8,13}$'
          description: The first 2 character must be "08". The third character must be one of "1-9". The next character must be numeric "0-9".
          minLength: 11
          maxLength: 13
    requestDataOrderUpdate:
      type: object
      required:
      - detail
      properties:
        detail:
          type: string
    responseLoginWithData:
      type: object
      properties:
        Code:
          type: integer
        Data:
          type: object
          properties:
            ID:
              type: integer
            Name:
              type: string
            Token:
              type: string
            Role: 
              type: string
        Message:
          type: string
    responseUserWithData:
      type: object
      properties:
        Code:
          type: integer
        Data:
          type: object
          properties:
            ID:
              type: integer
            Name:
              type: string
            Email:
              type: string
            Phone:
              type: string
        Message:
          type: string
    responseUserWithDataArray:
      type: object
      properties:
        Code:
          type: integer 
        Data:
          type: array
          items:
            type: object
            properties:
              ID:
                type: integer
              Name:
                type: string
              Email:
                type: string
              Phone:
                type: string
        Message:
          type: string    
    responseProductWithData:
      type: object
      properties:
        Code:
          type: integer
        Data:
          type: object
          properties:
            ID:
              type: integer
            Name_Product:
              type: string
            Detail_Product:
              type: string
            Price:
              type: integer
            Stock:
              type: integer
            Photo:
              type: string
              format: binary
            Url: 
              type: string
        Message:
          type: string      
    responseProductWithDataArray:
      type: object
      properties:
        Code:
          type: integer
        Data:
          type: array
          items:
            type: object
            properties:
              ID:
                type: integer
              Name_Product:
                type: string
              Detail_Product:
                type: string
              Price:
                type: integer
              Stock:
                type: integer
              Photo:
                type: string
                format: binary
              Url: 
                type: string
        Message:
          type: string
    responseGroupProductWithData:
      type: object
      properties:
        Code:
          type: integer
        Data:
          type: object
          properties:
            ID:
              type: integer
            ProductsID:
              type: integer
            NameGroupProduct:
              type: string
            Stock:
              type: integer
            CapacityGroupProduct:
              type: integer
            Price:
              type: integer
            AdminFee:
              type: integer
            TotalPrice:
              type: integer 
            DurationGroup:
              type: string
            Name_Product: 
              type: string
            Status: 
              type: string
            Url:
              type: string
            GetOrder: 
              type: array
              items:
                type: object
                properties:
                  OrderID:
                    type: integer
                  UsersID:
                    type: integer
                  GroupProductID:
                    type: integer
                  Name:
                    type: string
        Message:
          type: string
    responseGroupProductWithDataArray:
        type: object
        properties:
          Code:
            type: integer
          Data:
            type: array
            items:
              type: object
              properties:
                ID:
                  type: integer
                ProductsID:
                  type: integer
                NameGroupProduct:
                  type: string
                Stock:
                  type: integer
                CapacityGroupProduct:
                  type: integer
                Price:
                  type: integer
                AdminFee:
                  type: integer
                TotalPrice:
                  type: integer 
                DurationGroup:
                  type: string
                Name_Product: 
                  type: string
                Status: 
                  type: string
                Url:
                  type: string
                GetOrder: 
                  type: array
                  nullable: true
                  items:
                    type: object
                    properties:
                      OrderID:
                        type: integer
                      UsersID:
                        type: integer
                      GroupProductID:
                        type: integer
                      Name:
                        type: string
          Message:
            type: string  
    responseCreateGroupProductWithData:
      type: object
      properties:
        Code:
          type: integer
        Data:
          type: object
          properties:
            GroupProductID:
              type: integer
        Message:
          type: string
    responseCreateOrderWithData:
      type: object
      properties:
        Code:
          type: integer
        Data:
          type: object
          properties:
            OrderID:
              type: integer
            EwalletType: 
              type: string
            ExternalId:  
              type: string
            Amount:
              type: number
            BusinessId:  
              type: string
            Created: 
              type: string
        Message:
          type: string
    responseOrderWithData:
      type: object
      properties:
        Code:
          type: integer
        Data:
          type: object
          properties:
            OrderID:
              type: integer
            UsersID:
              type: integer
            GroupProductID:
              type: integer
            NameProduct:
              type: string
            PriceOrder:
              type: integer
            DetailCredential:
              type: string
        Message:
          type: string
    responseOrderWithDataArray:
      type: object
      properties:
        Code:
          type: integer
        Data:
          type: array 
          items:
            type: object
            properties:
              OrderID:
                type: integer
              UsersID:
                type: integer
              GroupProductID:
                type: integer
              NameProduct:
                type: string
              PriceOrder:
                type: integer
              DetailCredential:
                type: string
        Message:
          type: string
    responseNonData: 
      type: object
      properties:
        Code:
          type: integer
        Message:
          type: string 
  parameters:
   
    idParam:
      name: id
      in: path
      required: true
      schema:
        type: integer
        example: 1
   
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "use Token"  
  requestBodies:
    requestBodyLogin:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/requestDataLogin'
          examples:
            Admin:
              value:
                email: administrator@tog.org
                password: headon_f1
            Customer:
              value:
                email: perospero@gmail.com
                password: qwerty
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/requestDataLogin'     
    requestBodyUser:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/requestDataUser'
          examples:
            newUser1:
              value:
                name: user1
                email: user1@gmail.com
                password: qwerty
            newUser2:
              value:
                name: user2
                email: user2@ggmail.com
                password: asd!@#12
            newUser3:
              value:
                name: alfin
                email: alfin123@yahoo.co.id
                password: test123
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/requestDataUser'
    requestBodyUserUpdate:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/requestDataUser'
          examples:
            newData1:
              value:
                name: SupriadiBaru
                email: new.s@yahoo.co.id
                password: newpass
                phone: "+628966066096"
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/requestDataUser'
    requestBodyProduct:
      required: true
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/requestDataProduct'
    requestBodyProductUpdate:
      required: true
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/requestDataProductUpdate'
    requestBodyOrder: 
      required: true
      content:
        application/json:
          schema:  
            $ref: '#/components/schemas/requestDataOrder'
          example:
            phone: "08123456789"
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/requestDataOrder'
    requestBodyOrderUpdate: 
      required: true
      content:
        application/json:
          schema:  
            $ref: '#/components/schemas/requestDataOrderUpdate'
          example:
            detail: "Email: subs.netflix@mail.com, Password: qwerty"
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/requestDataOrderUpdate'
  responses:
    loginSuccess:
      description: Success Response Data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseLoginWithData'
          example:
            Code: 200
            Data: {
              ID: 4,
              Name: joko,
              Token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE2Mzk2OTAwMjMsInJvbGUiOiJhZG1pbiIsInVzZXJJZCI6NH0.1Ij1ZVqpqPDOVXzaXyqcyNMlnbLTfwD28Byv0aWNjAQ,
            }
            Message: Login Success
    loginFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          example:
            Code: 400 
            Message: Email or Password Incorrect
    successOperationNonData:
      description: Success Response Non Data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          example:
            Code: 200
            Message: Success Operation
    createUserFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          examples:
            Invalid Name:
              $ref: '#/components/examples/invalidName'
            Name alphanumeric:
              $ref: '#/components/examples/nameAlphanumeric'
            Invalid Email:
              $ref: '#/components/examples/invalidEmail'
            Invalid Password:
              $ref: '#/components/examples/invalidPassword'
            Password Must Consist Of:
              $ref: '#/components/examples/passwordMustConsistOf'
            Email Already Exist:
              $ref: '#/components/examples/emailOrTelephoneNumberAlreadyExist'
    getAllDataFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          examples:
            Data Not Found:
              $ref: '#/components/examples/dataNotFound'
            Bad Request:
              $ref: '#/components/examples/badRequest'
    getUserSuccess:
      description: Success Response Data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseUserWithData'
          example:
            Code: 200
            Data: {
              ID: 1,
              Name: try,
              Email: try@example.com, 
            }
            Message: Success Operation
    getDataByIdFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          examples:
            Invalid Id:
              $ref: '#/components/examples/invalidId'
            Data Not Found:
              $ref: '#/components/examples/dataNotFound'
            Bad Request:
              $ref: '#/components/examples/badRequest'
    updateUserFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          examples:
            Invalid Id:
              $ref: '#/components/examples/invalidId'
            Data Not Found:
              $ref: '#/components/examples/dataNotFound'
            Access Forbidden:
                $ref: '#/components/examples/accessForbidden'
            Invalid Name:
              $ref: '#/components/examples/invalidName'
            Invalid Email:
              $ref: '#/components/examples/invalidEmail'
            Invalid Password:
              $ref: '#/components/examples/invalidPassword'
            Password Must Consist Of:
              $ref: '#/components/examples/passwordMustConsistOf'
            Email Already Exist:
              $ref: '#/components/examples/emailOrTelephoneNumberAlreadyExist'
    deleteDataByIdFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          examples:
            Access Forbidden:
                $ref: '#/components/examples/accessForbidden'
            Invalid Id:
              $ref: '#/components/examples/invalidId'
            Data Not Found:
              $ref: '#/components/examples/dataNotFound'
    createProductFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          examples:
            File Extension Not Allowed:
              $ref: '#/components/examples/fileExtensionNotAllowed'
            Illegal File:
              $ref: '#/components/examples/illegalFile'
            Size File Too Big:
              $ref: '#/components/examples/sizeFileTooBig'
            Access Forbidden: 
              $ref: '#/components/examples/accessForbidden'
            Bad Request:
              $ref: '#/components/examples/badRequest'
    productServerFailed:
      description: Internal Server Error Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          examples:
            Can't Connect to Server:
              $ref: '#/components/examples/cantConnecttoServer'
            Failed to Upload File:
              $ref: '#/components/examples/failedtoUploadFile'
    getAllProductsSuccess:
      description: Success Response Data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseProductWithDataArray'
          example:
            Code: 200
            Data: [
              { 
                ID: 3,
                NameProduct: Youtube-Music,
                DetailProduct: Lorem,
                Price: 300000,
                Stock: 6,
                Photo: Youtube-Music-2021-12-13T10:06:45.jpg,
                Url: https://storage.googleapis.com/infinitysport-bucket/Youtube-Music-2021-12-13T10:06:45.jpg
              },
              { 
                ID: 4,
                NameProduct: Youtube Premium,
                DetailProduct: Berlangganan 1 bulan,
                Price: 200000,
                Stock: 4,
                Photo: Youtube-Premium-2021-12-14T09:34:47.png,
                Url: https://storage.googleapis.com/infinitysport-bucket/Youtube-Premium-2021-12-14T09:34:47.png
              }
            ]
            Message: Success Operation
    getProductSuccess:
      description: Success Response Data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseProductWithData'
          example:
            Code: 200
            Data: { 
              ID: 3,
                NameProduct: Youtube-Music,
                DetailProduct: Lorem,
                Price: 300000,
                Stock: 6,
                Photo: Youtube-Music-2021-12-13T10:06:45.jpg,
                Url: https://storage.googleapis.com/infinitysport-bucket/Youtube-Music-2021-12-13T10:06:45.jpg
            }
            Message: Success Operation
    updateProductFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          examples:
            Invalid Id:
              $ref: '#/components/examples/invalidId'
            Data Not Found:
              $ref: '#/components/examples/dataNotFound'
            Access Forbidden:
              $ref: '#/components/examples/accessForbidden'
            Bad Request:
              $ref: '#/components/examples/badRequest'
            File Extension Not Allowed:
              $ref: '#/components/examples/fileExtensionNotAllowed'
            Illegal File:
              $ref: '#/components/examples/illegalFile'
            Size File Too Big:
              $ref: '#/components/examples/sizeFileTooBig'
    createcartuccess:
      description: Success Operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseCreateOrderWithData'
          example:
            Code: 200
            Data: { 
              OrderID: 3,
              EwalletType: OVO,
              ExternalId: OVO-ewallet-20211219043142,
              Amount: 25000,
              BusinessId: 61b820fec8dadfc293726c7e,
              Created: 19-12-2021
            }
            Message: Success Operation
    createOrderFailed:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          examples:
            Invalid Param:
              $ref: '#/components/examples/invalidParam'
            Bad Request:
              $ref: '#/components/examples/badRequest'
            Access Forbidden:
              $ref: '#/components/examples/accessForbidden'
            Invalid Telephone Number:
              $ref: '#/components/examples/invalidTelephoneNumber'
            Id Group Product Not Found:
              $ref: '#/components/examples/idGroupProductNotFound'
            Group Product Full:
              $ref: '#/components/examples/groupProductFull'
    getcartsuccess:
      description: Success Operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseOrderWithData'
          example:
            Code: 200
            UserID: 15
            Data: [
              {
                NameProduct: Netflix,
                PriceOrder: 1254,
                Qty: 1,
              },
              {
                NameProduct: Youtube Premium,
                PriceOrder: 4321,
                Qty: 1
              }
              
            ]
            Message: Success Operation
    OrderResponseFailed:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          examples:
            Invalid Id:
              $ref: '#/components/examples/invalidId'
            Access Forbidden:
              $ref: '#/components/examples/dataNotFound'
            Data Not Found:
              $ref: '#/components/examples/dataNotFound'
            Bad Request:
              $ref: '#/components/examples/badRequest'
    getAllcartByIdGroupSuccess:
      description: Success Operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseOrderWithDataArray'
          example:
            Code: 200
            Data: [
              {
                OrderID: 1,
                UsersID: 150,
                GroupProductID: 1,
                NameProduct: Netflix,
                PriceOrder: 1254,
                DetailCredential: "Email: , Password: "
              },
              {
                OrderID: 2,
                UsersID: 162,
                GroupProductID: 1,
                NameProduct: Netfllix,
                PriceOrder: 1254,
                DetailCredential: "Email: , Password: "
              }          
            ]
            Message: Success Operation
    getAllcartByIdUserSuccess:
      description: Success Operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseOrderWithDataArray'
          example:
            Code: 200
            Data: [
              {
                OrderID: 1,
                UsersID: 150,
                GroupProductID: 1,
                NameProduct: Netflix,
                PriceOrder: 1254,
                DetailCredential: "Email: , Password: "
              },
              {
                OrderID: 3,
                UsersID: 150,
                GroupProductID: 2,
                NameProduct: Spotify,
                PriceOrder: 1500,
                DetailCredential: "Email: , Password: "
              }
            ]
            Message: Success Operation
    Updatecartuccess:
      description: Success Operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseOrderWithData'
          example:
            Code: 200
            Data: {
              OrderID: 1,
              UsersID: 150,
              GroupProductID: 1,
              NameProduct: Netflix,
              PriceOrder: 1254,
              DetailCredential: "Email: subs.netflix@mail.com, Password: qwerty"
            }
            Message: Success Operation
    UpdateOrderFailed:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          examples:
            Details Can't Be Empty:
              $ref: '#/components/examples/detailsCantBeEmpty'
            Invalid Id:
              $ref: '#/components/examples/invalidId'
            Access Forbidden:
              $ref: '#/components/examples/dataNotFound'
            Data Not Found:
              $ref: '#/components/examples/dataNotFound'
            Bad Request:
              $ref: '#/components/examples/badRequest'
  examples:
    accessIsDenied:
      value:
        Code: 400
        Message: Access is denied ID data is in the orderInvalid Id
    accessForbidden:
      value:
        Code: 400
        Message: Access Forbidden                
    badRequest:
      value:
        Code: 400
        Message: Bad Request
    cantConnecttoServer:
      value:
        Code: 500
        Message: Can't Connect to server
    dataisAvailable:
      value:
        Code: 400
        Message: Data is Available
    dataNotFound:
      value:
        Code: 400
        Message: Data Not Found
    detailsCantBeEmpty:
      value:
        Code: 400
        Message: Details Can't Be Empty
    emailOrTelephoneNumberAlreadyExist:
      value: 
        Code: 400
        Message: Email or Telephone Number Already Exist
    failedtoUploadFile:
      value:
        Code: 500
        Message: Failed to Upload File
    fileExtensionNotAllowed:
      value:
        Code: 400
        Message: File Extension Not Allowed
    groupProductFull:
      value:
        Code: 400
        Message: Group Product Full
    idGroupProductNotFound:
      value:
        Code: 400
        Message: Id Group Product Not Found
    idProductNotFound:
      value:
        Code: 400
        Message: Id Product Not Found
    illegalFile:
      value:
        Code: 400
        Message: Illegal File
    invalidEmail:
      value:
        Code: 400
        Message: Invalid Email
    invalidId:
      value:
        Code: 400
        Message: Invalid Id
    invalidName:
      value:
        Code: 400
        Message: Invalid Name
    invalidParam:
      value:
        Code: 400
        Message: Invalid Param
    invalidPassword:
      value:
        Code: 400
        Message: Invalid Password
    invalidTelephoneNumber:
      value:
        Code: 400
        Message: Invalid Telephone Number
    nameAlphanumeric:
      value:
        Code: 400
        Message: Name can only contains alphanumeric
    notAvailable:
      value:
        Code: 400
        Message: Not Available
    passwordMustConsistOf:
      value:
        Code: 400
        Message: Password must consist of 6 characters or more
    sizeFileTooBig:
      value:
        Code: 400
        Message: Size File Too Big
    